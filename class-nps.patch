Add FacebookNPS class that allows to use Facebook SDK without initializing php
session storage.

This makes api calls possible, but no login support for users.

--- php-facebook-sdk-3.2.0/src/facebook.nps.php~	2012-10-26 13:02:43.000000000 +0300
+++ php-facebook-sdk-3.2.0/src/facebook.nps.php	2012-10-26 13:05:14.019384949 +0300
@@ -19,9 +19,9 @@
 
 /**
  * Extends the BaseFacebook class with the intent of using
- * PHP sessions to store user ids and access tokens.
+ * internal class storage for persistant data. Limited functionality!
  */
-class Facebook extends BaseFacebook
+class FacebookNPS extends BaseFacebook
 {
   const FBSS_COOKIE_NAME = 'fbss';
 
@@ -32,12 +32,9 @@
   // Stores the shared session ID if one is set.
   protected $sharedSessionID;
 
+  protected $kPersistantData = array();
+
   /**
-   * Identical to the parent constructor, except that
-   * we start a PHP session to store the user ID and
-   * access token if during the course of execution
-   * we discover them.
-   *
    * @param Array $config the application configuration. Additionally
    * accepts "sharedSession" as a boolean to turn on a secondary
    * cookie for environments with a shared session (that is, your app
@@ -45,9 +42,6 @@
    * @see BaseFacebook::__construct in facebook.php
    */
   public function __construct($config) {
-    if (!session_id()) {
-      session_start();
-    }
     parent::__construct($config);
     if (!empty($config['sharedSession'])) {
       $this->initSharedSession();
@@ -55,7 +42,7 @@
     }
 
     $session_var_name = $this->constructSessionVariableName($key);
-    $_SESSION[$session_var_name] = $value;
+    $this->kPersistantData[$session_var_name] = $value;
   }
 
   protected function getPersistentData($key, $default = false) {
@@ -65,8 +52,8 @@
     }
 
     $session_var_name = $this->constructSessionVariableName($key);
-    return isset($_SESSION[$session_var_name]) ?
-      $_SESSION[$session_var_name] : $default;
+    return isset($this->kPersistantData[$session_var_name]) ?
+      $this->kPersistantData[$session_var_name] : $default;
   }
 
   protected function clearPersistentData($key) {
@@ -76,7 +63,7 @@
     }
 
     $session_var_name = $this->constructSessionVariableName($key);
-    unset($_SESSION[$session_var_name]);
+    unset($this->kPersistantData[$session_var_name]);
   }
 
   protected function clearAllPersistentData() {
